// <auto-generated />
using System;
using InvoiceGenerator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvoiceGenerator.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvoiceGenerator.Core.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Street2")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressType = "Billing",
                            City = "Reynosa",
                            Country = "Mexico",
                            CustomerId = 1,
                            PostalCode = "46875",
                            State = "Tamaulipas",
                            Street = "san Lorenzo",
                            Street2 = "356"
                        },
                        new
                        {
                            Id = 2,
                            AddressType = "Shipping",
                            City = "Reynosa",
                            Country = "Mexico",
                            CustomerId = 1,
                            PostalCode = "48791",
                            State = "Tamaulipas",
                            Street = "Calle Hidalgo",
                            Street2 = "N/A"
                        },
                        new
                        {
                            Id = 3,
                            AddressType = "Billing",
                            City = "Reynosa",
                            Country = "Mexico",
                            CustomerId = 2,
                            PostalCode = "1465",
                            State = "Tamaulipas",
                            Street = "Calle Occidental",
                            Street2 = "1080"
                        },
                        new
                        {
                            Id = 4,
                            AddressType = "Billing",
                            City = "Rio Bravo",
                            Country = "Mexico",
                            CustomerId = 3,
                            PostalCode = "34522",
                            State = "Tamaulipas",
                            Street = "Calle Aldama",
                            Street2 = "4689"
                        },
                        new
                        {
                            Id = 5,
                            AddressType = "Shipping",
                            City = "Rio Bravo",
                            Country = "Mexico",
                            CustomerId = 3,
                            PostalCode = "79845",
                            State = "Tamaulipas",
                            Street = "Fraccionamiento Azteca",
                            Street2 = "7879"
                        },
                        new
                        {
                            Id = 6,
                            AddressType = "Billing",
                            City = "Matamoros",
                            Country = "Mexico",
                            CustomerId = 4,
                            PostalCode = "88976",
                            State = "Tamaulipas",
                            Street = "Calle Horacio",
                            Street2 = "467858"
                        },
                        new
                        {
                            Id = 7,
                            AddressType = "Shipping",
                            City = "Rio Matamoros",
                            Country = "Mexico",
                            CustomerId = 4,
                            PostalCode = "75319",
                            State = "Tamaulipas",
                            Street = "Fracc. Tovar",
                            Street2 = "356"
                        },
                        new
                        {
                            Id = 8,
                            AddressType = "Billing",
                            City = "Rio Bravo",
                            Country = "Mexico",
                            CustomerId = 5,
                            PostalCode = "136479",
                            State = "Tamaulipas",
                            Street = "Cantera Pelones",
                            Street2 = "86479"
                        });
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Model.InvoiceLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceDetailsId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceDetailsId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceLineItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InvoiceDetailsId = 1,
                            ItemId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 2,
                            InvoiceDetailsId = 1,
                            ItemId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 3,
                            InvoiceDetailsId = 1,
                            ItemId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 4,
                            InvoiceDetailsId = 2,
                            ItemId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            InvoiceDetailsId = 2,
                            ItemId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            InvoiceDetailsId = 3,
                            ItemId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            InvoiceDetailsId = 4,
                            ItemId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            InvoiceDetailsId = 4,
                            ItemId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            InvoiceDetailsId = 4,
                            ItemId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 10,
                            InvoiceDetailsId = 4,
                            ItemId = 6,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 12,
                            InvoiceDetailsId = 5,
                            ItemId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 13,
                            InvoiceDetailsId = 5,
                            ItemId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 14,
                            InvoiceDetailsId = 6,
                            ItemId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 15,
                            InvoiceDetailsId = 7,
                            ItemId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 16,
                            InvoiceDetailsId = 7,
                            ItemId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 17,
                            InvoiceDetailsId = 8,
                            ItemId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 18,
                            InvoiceDetailsId = 8,
                            ItemId = 6,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 19,
                            InvoiceDetailsId = 1,
                            ItemId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 20,
                            InvoiceDetailsId = 1,
                            ItemId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 21,
                            InvoiceDetailsId = 11,
                            ItemId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 22,
                            InvoiceDetailsId = 12,
                            ItemId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 23,
                            InvoiceDetailsId = 12,
                            ItemId = 6,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Servicios de llanos online",
                            Name = "Servicios Llaneros"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Empresa inmobiliaria del norte",
                            Name = "Inmobiliaria Belice"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Empresa con logo de sol",
                            Name = "Emplayados Sol"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Servicios de maquinado y soldadura",
                            Name = "Maquinados Frontera"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Integrados y equipos para maquiladoras",
                            Name = "Integrados Del Noreste"
                        });
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateOnly(2024, 10, 20));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly>("ValidStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateOnly(2024, 10, 20));

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 1,
                            DueDate = new DateOnly(2024, 11, 18),
                            Identifier = "INV-467958",
                            ValidStartDate = new DateOnly(2024, 10, 24)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 1,
                            DueDate = new DateOnly(2024, 11, 16),
                            Identifier = "INV-134678",
                            ValidStartDate = new DateOnly(2024, 10, 22)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 2,
                            DueDate = new DateOnly(2024, 11, 14),
                            Identifier = "INV-258795",
                            ValidStartDate = new DateOnly(2024, 10, 20)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 3,
                            DueDate = new DateOnly(2024, 11, 18),
                            Identifier = "INV-462579",
                            ValidStartDate = new DateOnly(2024, 10, 24)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 3,
                            DueDate = new DateOnly(2024, 11, 18),
                            Identifier = "INV-231645",
                            ValidStartDate = new DateOnly(2024, 10, 24)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 4,
                            DueDate = new DateOnly(2024, 11, 13),
                            Identifier = "INV-465281",
                            ValidStartDate = new DateOnly(2024, 10, 19)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 4,
                            DueDate = new DateOnly(2024, 11, 13),
                            Identifier = "INV-356891",
                            ValidStartDate = new DateOnly(2024, 10, 19)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 4,
                            DueDate = new DateOnly(2024, 11, 16),
                            Identifier = "INV-197846",
                            ValidStartDate = new DateOnly(2024, 10, 22)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 5,
                            DueDate = new DateOnly(2024, 11, 19),
                            Identifier = "INV-1387541",
                            ValidStartDate = new DateOnly(2024, 10, 25)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 5,
                            DueDate = new DateOnly(2024, 11, 19),
                            Identifier = "INV-978548",
                            ValidStartDate = new DateOnly(2024, 10, 25)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 5,
                            DueDate = new DateOnly(2024, 11, 10),
                            Identifier = "INV-159632",
                            ValidStartDate = new DateOnly(2024, 10, 16)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateOnly(2024, 10, 20),
                            CustomerId = 2,
                            DueDate = new DateOnly(2024, 11, 7),
                            Identifier = "INV-1547862",
                            ValidStartDate = new DateOnly(2024, 10, 13)
                        });
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Tax")
                        .HasPrecision(12, 2)
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("InvoiceDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddressId = 1,
                            InvoiceId = 1,
                            SubTotal = 14999m,
                            Tax = 18,
                            Total = 16000m
                        },
                        new
                        {
                            Id = 2,
                            BillingAddressId = 1,
                            InvoiceId = 2,
                            SubTotal = 10000m,
                            Tax = 18,
                            Total = 11111m
                        },
                        new
                        {
                            Id = 3,
                            BillingAddressId = 3,
                            InvoiceId = 3,
                            SubTotal = 45000m,
                            Tax = 18,
                            Total = 50000m
                        },
                        new
                        {
                            Id = 4,
                            BillingAddressId = 4,
                            InvoiceId = 4,
                            SubTotal = 3900m,
                            Tax = 18,
                            Total = 4999m
                        },
                        new
                        {
                            Id = 5,
                            BillingAddressId = 4,
                            InvoiceId = 5,
                            SubTotal = 8000m,
                            Tax = 18,
                            Total = 9999m
                        },
                        new
                        {
                            Id = 6,
                            BillingAddressId = 6,
                            InvoiceId = 6,
                            SubTotal = 4560m,
                            Tax = 18,
                            Total = 5000m
                        },
                        new
                        {
                            Id = 7,
                            BillingAddressId = 6,
                            InvoiceId = 7,
                            SubTotal = 12000m,
                            Tax = 18,
                            Total = 12890m
                        },
                        new
                        {
                            Id = 8,
                            BillingAddressId = 6,
                            InvoiceId = 8,
                            SubTotal = 6500m,
                            Tax = 18,
                            Total = 8560m
                        },
                        new
                        {
                            Id = 9,
                            BillingAddressId = 8,
                            InvoiceId = 9,
                            SubTotal = 13465m,
                            Tax = 18,
                            Total = 143656m
                        },
                        new
                        {
                            Id = 10,
                            BillingAddressId = 8,
                            InvoiceId = 10,
                            SubTotal = 9000m,
                            Tax = 18,
                            Total = 11000m
                        },
                        new
                        {
                            Id = 11,
                            BillingAddressId = 8,
                            InvoiceId = 11,
                            SubTotal = 1354m,
                            Tax = 18,
                            Total = 2700m
                        },
                        new
                        {
                            Id = 12,
                            BillingAddressId = 3,
                            InvoiceId = 12,
                            SubTotal = 2345m,
                            Tax = 18,
                            Total = 2356m
                        });
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("Id");

                    b.ToTable("Items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Details = "Reparacion, mantenimiento, etc",
                            Name = "Reparacion de Grua",
                            Price = 8999m
                        },
                        new
                        {
                            Id = 2,
                            Details = "Mantenimiento Preventivo",
                            Name = "Mantenimiento de Equipos",
                            Price = 3500m
                        },
                        new
                        {
                            Id = 3,
                            Details = "Pintura a grua",
                            Name = "Capa de Pintura a Grua",
                            Price = 4500m
                        },
                        new
                        {
                            Id = 4,
                            Details = "Reparaciones para modulos electricos",
                            Name = "Reparaciones electricas",
                            Price = 15000m
                        },
                        new
                        {
                            Id = 5,
                            Details = "Maquinados chidos",
                            Name = "Maquinados perrones",
                            Price = 1799m
                        },
                        new
                        {
                            Id = 6,
                            Details = "Transportacion de maquinaria a toda la ciudad",
                            Name = "Transporte de Maquinaria",
                            Price = 10000m
                        });
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Model.Address", b =>
                {
                    b.HasOne("InvoiceGenerator.Core.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Model.InvoiceLineItem", b =>
                {
                    b.HasOne("InvoiceGenerator.Core.Models.InvoiceDetails", "InvoiceDetails")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("InvoiceDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceGenerator.Core.Models.Item", "Item")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Invoice", b =>
                {
                    b.HasOne("InvoiceGenerator.Core.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.InvoiceDetails", b =>
                {
                    b.HasOne("InvoiceGenerator.Core.Model.Address", "BillingAddress")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceGenerator.Core.Models.Invoice", "Invoice")
                        .WithOne("InvoiceDetails")
                        .HasForeignKey("InvoiceGenerator.Core.Models.InvoiceDetails", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Model.Address", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.InvoiceDetails", b =>
                {
                    b.Navigation("InvoiceLineItems");
                });

            modelBuilder.Entity("InvoiceGenerator.Core.Models.Item", b =>
                {
                    b.Navigation("InvoiceLineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
